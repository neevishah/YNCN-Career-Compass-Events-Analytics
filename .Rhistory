library(readr) #read data
source('~/R/yncn-event-report/1 - Load + Clean Data.R')
library(stringr)
library(dplyr)
event_registration_data <- read_csv("zs_data.csv")
head(event_registration_data)
?str_to_lower
??lowercase
?? "lowercase"
??"lowercase"
?lowercase
'??lowercase'
??'lowercase'
#clean names
names(event_registration_data) <- sapply(names(event_registration_data), function(x) { #dataframe is a table. each row is a data point, column is a value.
#names is a function run on the data and then sapply takes a list, runs a function on it, and then returns another list
#function x will take element x and run str
str_to_lower(str_replace(x, " ", ".")) #from stringr they always look like str_
})
#clean names
names(event_registration_data) <- sapply(names(event_registration_data), function(x) { #dataframe is a table. each row is a data point, column is a value.
#names is a function run on the data and then sapply takes a list, runs a function on it, and then returns another list
#function x will take element x and run str
str_to_lower(str_replace(x, " ", ".")) #from stringr they always look like str_
})
head(event_registration_data) #returns first 6 data rows to peek at it
#Grab what we care about from the dplyr package
event_registration_data <- event_registration_data %>% select(order.date, attendee.status, discipline, year, `what.industry do you want to work in?`)
#Grab what we care about from the dplyr package
event_registration_data <- event_registration_data %>% select(order.date, attendee.status, discipline, year, `what industry do you want to work in?`)
#Grab what we care about from the dplyr package
event_registration_data <- event_registration_data %>% select(order.date, attendee.status, discipline, year, `what.industry do you want to work in?`)
head(event_registration_data) #returns first 6 data rows to peek at it
event_registration_data <- read_csv("zs_data.csv")
head(event_registration_data) #returns first 6 data rows to peek at it
#clean names
names(event_registration_data) <- sapply(names(event_registration_data), function(x) {
#dataframe is a table. each row is a data point, column is a value.
#names is a function run on the data and then sapply takes a list, runs a function on it, and then returns another list
#function x will take element x and run str
str_to_lower(str_replace(x, " ", ".")) #from stringr they always look like str_
})
#Grab what we care about from the dplyr package
event_registration_data <- event_registration_data %>% select(order.date, attendee.status, discipline, year, `what.industry do you want to work in?`)
#Take a look at column types
sapply(event_registration_data, class)
?factor
#Challenge! Make attendee and discipline status a factor
as.factor(attendee.status)
#Challenge! Make attendee and discipline status a factor
as.factor(event_registration_data$attendee.status)
#Challenge! Make attendee and discipline status a factor
event_registration_data$attendee.status <- as.factor(event_registration_data$attendee.status)
factor(x = character(), levels, labels = levels,
exclude = NA, ordered = is.ordered(x), nmax = NA)
event_registration_data$discipline <- as.factor(event_registration_data$discipline)
event_registration_data$year <- as.factor(event_registration_data$year)
#Let's take a quick peak at our data
summary(event_registration_data)
levels(event_registration_data$discipline)
unique(event_registration_data$`what.industry do you want to work in?`)
event_registration_data$tech <- str_detect(temp, '[Tt]ech') | str_detect(temp, '[Ss]oftw')
event_registration_data$tech <- str_detect(temp, '[Tt]ech') | str_detect(temp, '[Ss]oftw')
unique(event_registration_data$`what.industry do you want to work in?`)
#Let's take a quick peak at our data
summary(event_registration_data)
event_registration_data$tech
#CHALLENGE: Clean up any other major industries into their own column. for ZS we care about consulting, tech, finance
event_registration_data$consulting <- str_detect(temp, '[Cc]onsulting')
event_registration_data$consulting
event_registration_data$finance <- str_detect(temp, '[Ff]in')
event_registration_data$finance
#Let's take a quick peak at our data
summary(event_registration_data)
#Attendees over time
aggregate_dates <- event_registration_data %>% group_by(order.date) %>% summarise(total_attendees = length(order.date))
#Attendees over time
aggregate_dates
?
#Attendees over time
aggregate_dates <- event_registration_data %>% group_by(order.date) %>% summarise(total_attendees = length(order.date)) %>% group_by(tech)
#Attendees over time
aggregate_dates
?group_by
#Attendees over time
aggregate_dates <- event_registration_data %>% group_by(order.date, tech) %>% summarise(total_attendees = length(order.date))
#Attendees over time
aggregate_dates
#or
aggregate_dates <- event_registration_data %>% group_by(order.date) %>% summarise(total_attendees = length(order.date, total_tech_attendees = sum(tech)))
#or
aggregate_dates <- event_registration_data %>% group_by(order.date) %>% summarise(total_attendees = length(order.date), total_tech_attendees = sum(tech))
#Attendees over time
aggregate_dates
#Attendees over time
aggregate_dates <- event_registration_data %>% group_by(order.date) %>% summarise(total_attendees = length(order.date))
attendee_plot <- ggplot(aggregate_dates, aes(x=order.date, y = total_attendees)) + geom_line() + xlab('Date') + ylab('New Attendees')
library(ggplot2)
attendee_plot <- ggplot(aggregate_dates, aes(x=order.date, y = total_attendees)) + geom_line() + xlab('Date') + ylab('New Attendees')
attendee_plot
attendee_plot <- ggplot(aggregate_dates, aes(x=order.date, y = total_attendees)) + geom_line() + xlab('Date') + ylab('New Attendees')
attendee_plot
#Challenge! Add similar analysis based on final attendee status
aggregate_attendee_status <- event_registration_data %>% group_by(order.date) %>% summarise(attendee.status = length(order.date))
attendee_status_plot <- ggplot(aggregate_attendee_status, aes(x=order.date, y = total_attendees)) + geom_line() + xlab('Date') + ylab('New Attendees')
attendee_status_plot
#Challenge! Add similar analysis based on final attendee status
aggregate_attendee_status <- event_registration_data %>% group_by(order.date) %>% summarise(attendee.status = length(order.date))
attendee_status_plot <- ggplot(aggregate_attendee_status, aes(x=order.date, y = attendee.status)) + geom_line() + xlab('Date') + ylab('New Attendees')
attendee_status_plot
#Challenge! Add similar analysis based on final attendee status
aggregate_attendee_status <- event_registration_data %>% group_by(attendee.status) %>% summarise(attendee.status = length(order.date))
#Challenge! Add similar analysis based on final attendee status
aggregate_attendee_status <- event_registration_data %>% group_by(total_attendees) %>% summarise(attendee.status = length(order.date))
#Challenge! Add similar analysis based on final attendee status
aggregate_attendee_status <- event_registration_data %>% group_by(order.date) %>% summarise(attendee_status = length(order.date))
attendee_status_plot <- ggplot(aggregate_attendee_status, aes(x=order.date, y = attendee.status)) + geom_line() + xlab('Date') + ylab('Attendee Status')
attendee_status_plot
#Challenge! Add similar analysis based on final attendee status
aggregate_attendee_status <- event_registration_data %>% group_by(order.date) %>% summarise(attendee.status = length(order.date))
attendee_status_plot <- ggplot(aggregate_attendee_status, aes(x=order.date, y = attendee.status)) + geom_line() + xlab('Date') + ylab('Attendee Status')
attendee_status_plot
?filter
#Challenge! Add similar analysis based on final attendee status
filter('Checked In', 'Attending', 'Not Attending')
#Challenge! Add similar analysis based on final attendee status
filter(event_registration_data, attendee.status == 'Checked In')
aggregate_attendee_status <- filter %>% group_by(order.date) %>% summarise(attendee.status = length(order.date))
aggregate_attendee_status <- filter(event_registration_data, attendee.status == 'Checked In') %>% group_by(order.date) %>% summarise(attendee.status = length(order.date))
attendee_status_plot <- ggplot(aggregate_attendee_status, aes(x=order.date, y = attendee.status)) + geom_line() + xlab('Date') + ylab('Attendee Status')
attendee_status_plot
#Breakdown by Discipline
disc_breakdown <- ggplot(event_registration_data, aes(x = discipline)) + geom_bar(aes(fill = discipline)) + theme(legend.position="none") + xlab('Discipline') + ylab("Number of Registrants")
disc_breakdown
event_attendee_data <- event_registration_data %>% filter(attendee.status=='Checked In')
event_attendee_data
ggplot(event_attendee_data, aes(x = discipline)) + geom_bar(aes(fill = discipline)) + theme(legend.position="none") + xlab('Discipline') + ylab("Number of Attendees")
#Breakdown by Discipline
disc_breakdown <- ggplot(event_registration_data, aes(x = discipline)) + geom_bar(aes(fill = discipline)) + theme(legend.position="none") + xlab('Discipline') + ylab("Number of Registrants")
event_attendee_data
event_attendee_data <- ggplot(event_attendee_data, aes(x = discipline)) + geom_bar(aes(fill = discipline)) + theme(legend.position="none") + xlab('Discipline') + ylab("Number of Attendees")
event_attendee_data
event_attendee_data <- event_registration_data %>% filter(attendee.status=='Checked In')
#Breakdown by Discipline
disc_breakdown <- ggplot(event_registration_data, aes(x = discipline)) + geom_bar(aes(fill = discipline)) + theme(legend.position="none") + xlab('Discipline') + ylab("Number of Registrants")
#Challenge! Make a breakdown by year
year_breakdown <- ggplot(event_registration_data, aes(x = year)) + geom_bar(aes(fill = year)) + theme(legend.position="none") + xlab('Year') + ylab("Number of Registrants")
year_breakdown
knitr::opts_chunk$set(echo = FALSE)
source('1 - Load + Clean Data.R')
source('2 - Graphs.R')
attendee_plot
attendee_status_plot
year_breakdown
install.packages('tinytex')
tinytex::install_tinytex()
library(knitr)
knit2pdf('event_report.md')
cwd()
setwd("~/R/yncn-event-report")
